#!/usr/bin/python3

import sys
import pytoml as toml
import subprocess
#import shutil
import os
# import tarfile

def main(args):
	cmd = args[1]
	cfg = ng3eToml()
	print(cfg)
	r = False
#  	ng3eGetBases()
	
	if cmd == 'build':
		r = ng3eBuild(cfg)
		if not r:
			return r
	elif cmd == 'pack':
		r = ng3ePack(cfg)
		if not r:
			return r
	elif cmd == 'clean':
		r = ng3eClean(cfg)
		if not r:
			return r
	elif cmd == 'test':
		r = True
	
	return r

def ng3eToml():
	fin = open('ng3e.toml', 'rb')
	obj = toml.load(fin)
	fin.close()
# 	builds = obj['build']
# 	for ver in builds:
# 		print("Version:", ver['version'])
	return obj

def ng3eInit():
	pass

def runCmd(cmd, cwd=None):
	print("running: '%s'" % cmd)
	sys.stdout.flush()
	r = subprocess.run(cmd, shell=True, cwd=cwd)
	if r.returncode:
		return False
	return True

def ng3eGetBases():
	deployDir = os.getenv('NG3E_TOP')+'/deploy/bases'
	dirList = []
	for d in os.listdir(deployDir):
		dirList.append(deployDir+'/'+d)
	print("dirList:", dirList)
	
	return dirList

# def ng3eFetch(cfg):
# 	pkg = cfg['package']
# 	src = pkg['source']
# 	ver = pkg['version']
# 	
# 	if not os.path.isdir('src'):
# 		# no source yet, clone repo
# 		cmd = "git clone %s src" % src
# 		r = runCmd(cmd)
# 		if not r:
# 			return False
# 
# 	# checkout the version (tag)
# 	cmd = "git checkout %s" % ver
# 	r = runCmd(cmd, cwd='src')
# 	if not r:
# 		return False
# 
# 	return True

def ng3eClone(cfg):
	pkg = cfg['package']
	src = pkg['source']
	
	if not os.path.isdir('src'):
		# no source yet, clone repo
		cmd = "git clone %s src" % src
		r = runCmd(cmd)
		if not r:
			return False

	return True

def ng3eCheckout(cfg, ver):
	# checkout the version (tag)
	cmd = "git checkout %s" % ver
	r = runCmd(cmd, cwd='src')
	if not r:
		return False

	return True

def ng3eConfig(cfg, baseDir):
	s = '# Autogenerated by NG3E'
	s += '\n'
	s += "EPICS_BASE=%s" % baseDir
	s += '\n'
	
	fh = open('src/configure/RELEASE', 'w')
	fh.write(s)
	fh.close()
	

	return True

def ng3eCompile(cfg):
	cmd = "make -j5"
	r = runCmd(cmd, cwd='src')
	if not r:
		return False

	return True

def ng3eClean(cfg):
	cmd = "make distclean"
	r = runCmd(cmd, cwd='src')
	if not r:
		return False

# 	cmd = "rm -fr stage"
# 	r = runCmd(cmd)
# 	if not r:
# 		return False

	return True

def ng3eDistClean(cfg):
	cmd = "make distclean"
	r = runCmd(cmd, cwd='src')
	if not r:
		return False

	cmd = "rm -fr stage"
	r = runCmd(cmd)
	if not r:
		return False

	return True

def ng3ePack(cfg, ver):
	pkg = cfg['package']
	name = pkg['name']
# 	ver = pkg['version']
	grp = pkg['group']

	cmd = "rm -fr stage"
	r = runCmd(cmd)
	if not r:
		return False

	cmd = "mkdir -p stage/%s" % (grp)
	r = runCmd(cmd)
	if not r:
		return False

	namever = "%s-%s" % (name, ver)
	cmd = "cp -a src stage/%s/%s" % (grp, namever)
	r = runCmd(cmd)
	if not r:
		return False

	cmd = "find stage/%s/%s -name O.* -o -name .git | xargs rm -fr" % (grp, namever)
	r = runCmd(cmd)
	if not r:
		return False

	arch = "%s.tar.bz2" % (namever)
	cmd = "tar jcf ../%s %s" % (arch, grp)
	r = runCmd(cmd, cwd='stage')
	if not r:
		return False

	return True

def ng3eBuildBase(cfg):
# 	r = ng3eFetch(cfg)
# 	if not r:
# 		return r
	r = ng3eClone(cfg)
	if not r:
		return r
	
	builds = cfg['build']
	for build in builds:
		ver = build['version']
		print("Version:", ver)

		r = ng3eClean(cfg)
		if not r:
			return r
		
		r = ng3eCheckout(cfg, ver)
		if not r:
			return r

		r = ng3eCompile(cfg)
		if not r:
			return r
	
		r = ng3ePack(cfg, ver)
		if not r:
			return r

	return True

def ng3eBuildModule(cfg):
	r = ng3eClone(cfg)
	if not r:
		return r

	baseDirList = ng3eGetBases()
	for baseDir in baseDirList:
		r = ng3eConfig(cfg, baseDir)
		if not r:
			return r
		r = ng3eCompile(cfg)
		if not r:
			return r

	return True

def ng3eBuild(cfg):
	pkg = cfg['package']
# 	name = pkg['name']
# 	ver = pkg['version']
	grp = pkg['group']

	if grp == 'bases':
		r = ng3eBuildBase(cfg)
	elif grp == 'modules':
		r = ng3eBuildModule(cfg)
	else:
		return False
	
	return r

if __name__ == "__main__":
	r = main(sys.argv)
	if not r:
		print("FAILED!")
		exit(-1)
	
	print("SUCCESS!")
	exit(0)
